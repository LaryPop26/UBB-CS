     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  ;Sa se citeasca de la tastatura doua numere a si b (in baza 10) si sa se calculeze: (a+b) / (a-b). 
     3                                  ;Catul impartirii se va salva in memorie in variabila "rezultat" (definita in segmentul de date). Valorile se considera cu semn.
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  import printf msvcrt.dll
    13                                  import scanf msvcrt.dll
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 00000000                    a dd 0
    18 00000004 00000000                    b dd 0
    19 00000008 00000000                    rezultat dd 0
    20 0000000C 5072696D756C206E75-         msg db "Primul numar este: ", 0
    20 00000015 6D617220657374653A-
    20 0000001E 2000               
    21 00000020 416C20646F696C6561-         msg2 db "Al doilea numar este: ", 0
    21 00000029 206E756D6172206573-
    21 00000032 74653A2000         
    22 00000037 52657A756C74617475-         msg3 db "Rezultatul operatiei este: %d",0
    22 00000040 6C206F706572617469-
    22 00000049 656920657374653A20-
    22 00000052 256400             
    23 00000055 45726F6172652C206E-         msgerror db "Eroare, numere egale!",0
    23 0000005E 756D65726520656761-
    23 00000067 6C652100           
    24 0000006B 256400                      format db "%d", 0
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; citire primul nr
    29 00000000 68[0C000000]                    push dword msg 
    30 00000005 FF15[00000000]                  call [printf]      
    31 0000000B 83C404                          add esp, 4 * 1      
    32                                           
    33 0000000E 68[00000000]                    push dword a       
    34 00000013 68[6B000000]                    push dword format
    35 00000018 FF15[00000000]                  call [scanf]        
    36 0000001E 83C408                          add esp, 4 * 2     
    37                                                   
    38                                          ; citire al 2 lea nr      
    39 00000021 68[20000000]                    push dword msg2 
    40 00000026 FF15[00000000]                  call [printf]     
    41 0000002C 83C404                          add esp, 4 * 1      
    42                                          
    43 0000002F 68[04000000]                    push dword b       
    44 00000034 68[6B000000]                    push dword format
    45 00000039 FF15[00000000]                  call [scanf]       
    46 0000003F 83C408                          add esp, 4 * 2     
    47                                          
    48                                          ; salvare nr in registrii pt calcule
    49 00000042 8B1D[00000000]                  mov ebx,[a]
    50 00000048 A1[04000000]                    mov eax,[b]
    51                                          
    52 0000004D 01D8                            add eax,ebx ; eax = a+b
    53 0000004F 99                              cdq
    54                                          
    55 00000050 2B1D[04000000]                  sub ebx,[b] ; ebx = a-b
    56                                          
    57                                          ; comparare rez din ebx cu 0 , in caz ca nr sunt egale sa se afiseze mesaj de eroare
    58 00000056 B900000000                      mov ecx,0
    59 0000005B 39CB                            cmp ebx,ecx
    60 0000005D 741D                            jz aici
    61                                          
    62 0000005F F7FB                            idiv ebx    ; eax = edx:eax / ebx , edx = edx:eax % ebx
    63                                          
    64 00000061 A3[08000000]                    mov [rezultat],eax
    65                                          ; afisare rezultat      
    66 00000066 FF35[08000000]                  push dword [rezultat]       
    67 0000006C 68[37000000]                    push dword msg3
    68 00000071 FF15[00000000]                  call [printf]       
    69 00000077 83C408                          add esp, 4 * 2     
    70 0000007A EB0E                            jmp final
    71                                                        
    72                                          aici:
    73 0000007C 68[55000000]                    push dword msgerror
    74 00000081 FF15[00000000]                  call [printf]
    75 00000087 83C404                          add esp, 4           
    76                                          
    77                                          final:
    78                                          ; exit(0)
    79 0000008A 6A00                            push dword 0      ; push the parameter for exit onto the stack
    80 0000008C FF15[00000000]                  call [exit]       ; call exit to terminate the program
