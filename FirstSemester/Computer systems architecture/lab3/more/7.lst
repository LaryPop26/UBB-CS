     1                                  ;inmultiri, impartiri - interpretare fara semn
     2                                  ;a,c - byte, b - word, d - doubleword, x - qword
     3                                  ;24. a - (7+x)/(b*b-c/d+2)
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 01                          a db 1
    17 00000001 0A00                        b dw 10
    18 00000003 05                          c db 5
    19 00000004 64000000                    d dd 100
    20 00000008 E803000000000000            x dq 1000
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 66A1[01000000]                  mov ax,[b]
    26 00000006 66F725[01000000]                mul word[b] ; dx:ax = b*b
    27                                          
    28 0000000D 6652                            push dx
    29 0000000F 6650                            push ax
    30 00000011 59                              pop ecx ; ecx = b*b
    31                                          
    32 00000012 A0[03000000]                    mov al,[c]
    33 00000017 B400                            mov ah,0
    34 00000019 66BB0000                        mov bx,0
    35                                          
    36 0000001D 6653                            push bx
    37 0000001F 6650                            push ax
    38 00000021 58                              pop eax ; eax = c
    39                                          
    40 00000022 BA00000000                      mov edx,0 ; edx:eax = c
    41 00000027 8B1D[04000000]                  mov ebx,[d]
    42                                          
    43 0000002D F7F3                            div ebx ; eax = c/d iar edx = c%d
    44                                          
    45 0000002F BA02000000                      mov edx,2
    46                                          
    47 00000034 29C1                            sub ecx,eax ; ecx = b*b-c/d
    48 00000036 29D1                            sub ecx,edx ; ecx = b*b-c/d-2
    49                                          
    50 00000038 A1[08000000]                    mov eax,dword[x]
    51 0000003D 8B15[0C000000]                  mov edx,dword[x+4] ; edx:eax = x
    52                                          
    53 00000043 BB07000000                      mov ebx,7
    54 00000048 01D8                            add eax,ebx ; edx:eax = 7+x
    55 0000004A 83D200                          adc edx,0 ; ???
    56                                          
    57 0000004D F7F1                            div ecx ; eax = (7+x)/(b*b-c/d+2)
    58                                                  ; edx = (7+x)%(b*b-c/d+2)
    59                                                  
    60 0000004F 8A1D[00000000]                  mov bl,[a]
    61 00000055 B700                            mov bh,0
    62 00000057 66B90000                        mov cx,0
    63                                          
    64 0000005B 6651                            push cx
    65 0000005D 6653                            push bx
    66 0000005F 5B                              pop ebx ; ebx = a
    67                                          
    68 00000060 29C3                            sub ebx,eax ; ebx = a-(7+x)/(b*b-c/d+2)
    69                                      
    70                                          ; exit(0)
    71 00000062 6A00                            push dword 0      ; push the parameter for exit onto the stack
    72 00000064 FF15[00000000]                  call [exit]       ; call exit to terminate the program
