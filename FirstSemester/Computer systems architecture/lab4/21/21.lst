     1                                  ;Se dau cuvintele A si B. Se cere dublucuvantul C:
     2                                      ;bitii 0-3 ai lui C coincid cu bitii 5-8 ai lui B
     3                                      ;bitii 4-10 ai lui C sunt invers fata de bitii 0-6 ai lui B
     4                                      ;bitii 11-18 ai lui C sunt 1
     5                                      ;bitii 19-31 ai lui C coincid cu bitii 3-15 ai lui B
     6                                  
     7                                  bits 32 ; assembling for the 32 bits architecture
     8                                  
     9                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
    10                                  global start        
    11                                  
    12                                  ; declare external functions needed by our program
    13                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    14                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    15                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    16                                  
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19 00000000 6932                        a dw 0011001001101001b
    20 00000002 A5E4                        b dw 1110010010100101b  
    21 00000004 00000000                    c dd 0
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 BB00000000                      mov ebx, 0 ; aici vom avea rezultatul
    27                                          
    28 00000005 B800000000                      mov eax,0        
    29 0000000A 66A1[02000000]                  mov ax,[b] ; izolam bitii 5-8 ai lui b
    30 00000010 6625E000                        and ax, 0000000011100000b
    31 00000014 B105                            mov cl, 5
    32 00000016 66D3C8                          ror ax,cl ; rotim 5 pozitii in dreapta
    33 00000019 09C3                            or ebx,eax ; punem bitii in rezultat
    34                                          
    35 0000001B B800000000                      mov eax,0
    36 00000020 66A1[02000000]                  mov ax, [b] ; negam si izolam bitii 0-6 ai lui b
    37 00000026 66F7D0                          not ax
    38 00000029 6683E07F                        and ax, 0000000001111111b
    39 0000002D B104                            mov cl,4
    40 0000002F 66D3E0                          shl ax,cl ; shift 5 pozitii in stanga 
    41                                          
    42 00000032 09C3                            or ebx,eax ; punem bitii in rezultat
    43                                          
    44 00000034 81CB00F80700                    or ebx,00000000000001111111100000000000b ; facem bitii 11-18 din rezultat sa aiba valoarea 1
    45                                          
    46 0000003A B800000000                      mov eax,0
    47 0000003F 66A1[02000000]                  mov ax,[b] ; izolam bitii 3-15 ai lui b
    48 00000045 6683E0F8                        and ax, 1111111111111000b
    49 00000049 66B90000                        mov cx,0
    50                                          
    51 0000004D 6650                            push ax
    52 0000004F 6651                            push cx
    53 00000051 58                              pop eax ; transformare din ax in eax pentru a bune bitii pe pozitiile corecte in rezultat
    54                                          
    55 00000052 09C3                            or ebx,eax ; punem bitii ini rezultat
    56                                          
    57 00000054 891D[04000000]                  mov [c],ebx ; salvam rez in dublucuvantul c
    58                                          ; exit(0)
    59 0000005A 6A00                            push dword 0      ; push the parameter for exit onto the stack
    60 0000005C FF15[00000000]                  call [exit]       ; call exit to terminate the program
