     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ;Se da un fisier text. Sa se citeasca continutul fisierului, sa se determine caracterul special 
     4                                  ;(diferit de litera) cu cea mai mare frecventa si sa se afiseze acel caracter, impreuna cu frecventa acestuia. 
     5                                  ;Numele fisierului text este definit in segmentul de date.
     6                                  
     7                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     8                                  global start        
     9                                  
    10                                  ; declare external functions needed by our program
    11                                  extern exit, fopen, fread, fclose, printf               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  import printf msvcrt.dll
    15                                  import fopen msvcrt.dll
    16                                  import fread msvcrt.dll
    17                                  import fclose msvcrt.dll
    18                                  ; our data is declared here (the variables needed by our program)
    19                                  segment data use32 class=data
    20 00000000 7370656369616C6368-         nume_fisier db "specialchar.txt", 0
    20 00000009 61722E74787400     
    21 00000010 7200                        mod_acces db "r",0
    22                                      
    23                                      len equ 100
    24 00000012 00<rept>                    text times (len+1) db 0
    25 00000077 FFFFFFFF                    descriptor dd -1
    26 0000007B 00000000<rept>              frequency times 256 dd 0
    27 0000047B 436172616374657275-         format db "Caracterul special este: '%c', intalnit de %d ori.", 0 
    27 00000484 6C207370656369616C-
    27 0000048D 20657374653A202725-
    27 00000496 63272C20696E74616C-
    27 0000049F 6E6974206465202564-
    27 000004A8 206F72692E00       
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ; deschdere fisier pentru citire
    33 00000000 68[10000000]                    push dword mod_acces
    34 00000005 68[00000000]                    push dword nume_fisier
    35 0000000A FF15[00000000]                  call [fopen]
    36 00000010 83C408                          add esp, 4 * 2
    37                                          
    38 00000013 A3[77000000]                    mov [descriptor], eax
    39                                          
    40 00000018 83F800                          cmp eax,0
    41 0000001B 0F8485000000                    je final
    42                                          
    43                                          ; citire din fisier
    44 00000021 FF35[77000000]                  push dword [descriptor]
    45 00000027 6A64                            push dword len
    46 00000029 6A01                            push dword 1
    47 0000002B 68[12000000]                    push dword text
    48 00000030 FF15[00000000]                  call [fread]
    49 00000036 83C410                          add esp,4 * 4 
    50                                          
    51 00000039 BE[12000000]                    mov esi, text    ; esi -> text
    52                                  
    53 0000003E 31DB                            xor ebx, ebx     ; contor pt frecventa
    54 00000040 31C9                            xor ecx, ecx     ; contor pt ascii cu frecventa maxima
    55                                  
    56                                          count_loop:
    57 00000042 8A06                                mov al, byte [esi]
    58 00000044 3C00                                cmp al, 0        ; verificare daca s-a ajuns la final
    59 00000046 741D                                je find_max
    60 00000048 46                                  inc esi
    61                                  
    62                                              ; Check if character is special
    63 00000049 3C61                                cmp al, 'a'
    64 0000004B 7C0C                                jl increment_frequency
    65 0000004D 3C7A                                cmp al, 'z'
    66 0000004F 7EF1                                jle count_loop
    67 00000051 3C41                                cmp al, 'A'
    68 00000053 7C04                                jl increment_frequency
    69 00000055 3C5A                                cmp al, 'Z'
    70 00000057 7EE9                                jle count_loop
    71                                  
    72                                          increment_frequency:
    73 00000059 0FB6F8                              movzx edi, al    ; Zero extend the ASCII value to edi
    74 0000005C FF04BD[7B000000]                    inc dword [frequency + edi * 4]
    75 00000063 EBDD                                jmp count_loop
    76                                  
    77                                          find_max:
    78 00000065 BF[7B000000]                        mov edi, frequency
    79 0000006A 31C0                                xor eax, eax
    80 0000006C 31D2                                xor edx, edx
    81                                  
    82                                          max_loop:
    83 0000006E 3D00010000                          cmp eax, 256     ; Check if we've gone through all ASCII values
    84 00000073 7412                                je display_result
    85 00000075 8B1C85[7B000000]                    mov ebx, [frequency + eax * 4]
    86 0000007C 39D3                                cmp ebx, edx
    87 0000007E 7E04                                jle next_char
    88 00000080 89DA                                mov edx, ebx    ; Update max frequency
    89 00000082 89C1                                mov ecx, eax    ; Update character with max frequency
    90                                          next_char:
    91 00000084 40                                  inc eax
    92 00000085 EBE7                                jmp max_loop
    93                                  
    94                                              
    95                                          display_result:
    96 00000087 52                                  push dword edx
    97 00000088 51                                  push dword ecx
    98 00000089 68[7B040000]                        push dword format
    99 0000008E FF15[00000000]                      call [printf]
   100 00000094 83C40C                              add esp, 4*3
   101                                              
   102                                              ; inchidere fisier
   103 00000097 FF35[77000000]                      push dword [descriptor]
   104 0000009D FF15[00000000]                      call [fclose]
   105 000000A3 83C404                              add esp, 4
   106                                          
   107                                          
   108                                          final:
   109                                          
   110                                      
   111                                          ; exit(0)
   112 000000A6 6A00                            push dword 0      ; push the parameter for exit onto the stack
   113 000000A8 FF15[00000000]                  call [exit]       ; call exit to terminate the program
