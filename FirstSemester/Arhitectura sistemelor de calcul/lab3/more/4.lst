     1                                  ;adunari, scaderi - interpretare cu semn
     2                                  ;a - byte, b - word, c - double word, d - qword
     3                                  ;24. (a+b+c)-d+(b-c)
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 01                          a db 1
    17 00000001 0A00                        b dw 10
    18 00000003 64000000                    c dd 100
    19 00000007 E803000000000000            d dq 1000
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ;convertim cu semn byte a la dword
    25 00000000 A0[00000000]                    mov al,[a]
    26 00000005 6698                            cbw
    27 00000007 98                              cwde
    28 00000008 89C3                            mov ebx,eax ; ebx = a
    29                                          
    30                                          ;convertim cu semn wordul b la dword
    31 0000000A 66A1[01000000]                  mov ax,[b]
    32 00000010 98                              cwde
    33 00000011 01C3                            add ebx,eax ; ebx = a + b
    34                                          
    35 00000013 A1[03000000]                    mov eax,[c]
    36 00000018 01D8                            add eax,ebx ; eax = a + b + c
    37                                          
    38                                          ;convert rezultat la qword
    39 0000001A 99                              cdq ; edx:eax = a+b+c
    40                                  
    41 0000001B 8B1D[07000000]                  mov ebx,dword[d]
    42 00000021 8B0D[0B000000]                  mov ecx,dword[d+4]
    43                                          ;scadere (a+b+c) - d
    44 00000027 29D8                            sub eax,ebx
    45 00000029 19CA                            sbb edx,ecx     ;edx:eax = (a+b+c) - d
    46                                          
    47 0000002B 89C3                            mov ebx,eax
    48 0000002D 89D1                            mov ecx,edx     ;ecx:ebx = (a+b+c) - d
    49                                          ;realizam scaderea b - c
    50                                          ;convertim cu semmn wordul b la dword
    51 0000002F 66A1[01000000]                  mov ax,[b]
    52 00000035 98                              cwde
    53 00000036 2B05[03000000]                  sub eax,[c]    ; eax = b - c
    54                                          ;convertire cu semn de la dword la qword
    55 0000003C 99                              cdq     ;edx:eax = b -c
    56                                          
    57                                          ;adunare finala
    58 0000003D 01C3                            add ebx, eax
    59 0000003F 11D1                            adc ecx, edx    ; ecx:ebx = (a+b+c) - d + (b - c)        
    60                                          
    61                                          ; exit(0)
    62 00000041 6A00                            push dword 0      ; push the parameter for exit onto the stack
    63 00000043 FF15[00000000]                  call [exit]       ; call exit to terminate the program
