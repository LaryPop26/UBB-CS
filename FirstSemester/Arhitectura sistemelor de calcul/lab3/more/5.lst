     1                                  ;inmultiri, impartiri - interpretare fara semn
     2                                  ;a,c - byte, b - word, d - doubleword, x - qword
     3                                  ;10. d-(7-a*b+c)/a-6+x/2
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 01                          a db 1
    17 00000001 0A00                        b dw 10
    18 00000003 05                          c db 5
    19 00000004 64000000                    d dd 100
    20 00000008 E803000000000000            x dq 1000
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 A0[00000000]                    mov al,[a]
    26 00000005 B400                            mov ah,0
    27                                          
    28 00000007 66F725[01000000]                mul word[b] ; dx:ax = a*b
    29                                          
    30 0000000E 6652                            push dx
    31 00000010 6650                            push ax
    32 00000012 58                              pop eax ; eax = a*b
    33                                          
    34 00000013 BB07000000                      mov ebx,7
    35 00000018 29C3                            sub ebx,eax ; ebx = 7 - a*b
    36                                          
    37 0000001A A0[03000000]                    mov al,[c]
    38 0000001F B400                            mov ah,0
    39 00000021 66BA0000                        mov dx,0
    40                                          
    41 00000025 6652                            push dx
    42 00000027 6650                            push ax
    43 00000029 58                              pop eax ; eax = c
    44                                          
    45 0000002A 01C3                            add ebx,eax ; ebx = 7 - a*b + c
    46                                          
    47 0000002C 53                              push ebx
    48 0000002D 6658                            pop ax
    49 0000002F 665A                            pop dx  ;dx:ax = 7 - a*b + c
    50                                          
    51 00000031 8A1D[00000000]                  mov bl,[a]
    52 00000037 B700                            mov bh, 0   ; bx = a
    53                                          
    54 00000039 66F7F3                          div bx  ; ax = (7 - a*b + c) / a   
    55                                                  ; dx = (7 - a*b + c) % a 
    56                                  
    57 0000003C 66BA0000                        mov dx,0
    58 00000040 6652                            push dx
    59 00000042 6650                            push ax
    60 00000044 58                              pop eax ; eax = (7 - a*b + c)/a   
    61                                          
    62 00000045 8B1D[04000000]                  mov ebx,[d] ; ebx = d 
    63 0000004B B906000000                      mov ecx, 6 ; ecx = 6
    64                                          
    65 00000050 29C3                            sub ebx, eax    ; ebx = d-(7-a*b+c)/a
    66 00000052 29CB                            sub ebx, ecx ; ebx = d-(7-a*b+c)/a-6
    67                                          
    68 00000054 A1[08000000]                    mov eax,dword[x]
    69 00000059 8B15[0C000000]                  mov edx,dword[x+4] ; edx:eax = x
    70                                          
    71 0000005F B902000000                      mov ecx,2
    72 00000064 F7F1                            div ecx ; eax = x/2 + edx = x%2
    73                                          
    74 00000066 B900000000                      mov ecx,0
    75                                          
    76 0000006B 01D8                            add eax,ebx
    77 0000006D 11CA                            adc edx,ecx ; edx:eax = d-(7-a*b+c)/a-6+x/2
    78                                          
    79                                          ; exit(0)
    80 0000006F 6A00                            push dword 0      ; push the parameter for exit onto the stack
    81 00000071 FF15[00000000]                  call [exit]       ; call exit to terminate the program
