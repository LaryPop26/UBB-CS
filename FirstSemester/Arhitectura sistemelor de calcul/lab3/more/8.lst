     1                                  ;inmultiri, impartiri - interpretare cu semn
     2                                  ;a,c - byte, b - word, d - doubleword, x - qword
     3                                  ;24. a - (7+x)/(b*b-c/d+2)
     4                                  
     5                                  bits 32 ; assembling for the 32 bits architecture
     6                                  
     7                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     8                                  global start        
     9                                  
    10                                  ; declare external functions needed by our program
    11                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 01                          a db 1
    18 00000001 0A00                        b dw 10
    19 00000003 32                          c db 50
    20 00000004 64000000                    d dd 100
    21 00000008 E803000000000000            x dq 1000
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 66A1[01000000]                  mov ax,[b]
    27 00000006 66F72D[01000000]                imul word[b] ; dx:ax = b*b
    28                                          
    29 0000000D 6652                            push dx
    30 0000000F 6650                            push ax
    31 00000011 59                              pop ecx ; ecx = b*b
    32                                          
    33 00000012 A0[03000000]                    mov al,[c]
    34 00000017 6698                            cbw
    35 00000019 98                              cwde ; eax = c
    36 0000001A 99                              cdq  ; edx:eax = c
    37                                          
    38 0000001B 8B1D[04000000]                  mov ebx,[d]
    39 00000021 F7FB                            idiv ebx ; eax = c/d iar edx = c%d
    40                                          
    41 00000023 BA02000000                      mov edx,2
    42                                          
    43 00000028 29C1                            sub ecx,eax ; ecx = b*b-c/d
    44 0000002A 29D1                            sub ecx,edx ; ecx = b*b-c/d-2
    45                                          
    46 0000002C A1[08000000]                    mov eax,dword[x]
    47 00000031 8B15[0C000000]                  mov edx,dword[x+4] ; edx:eax = x
    48                                          
    49 00000037 BB07000000                      mov ebx,7
    50 0000003C 01D8                            add eax,ebx ; edx:eax = 7+x
    51 0000003E 83D200                          adc edx,0 ; ???
    52                                          
    53 00000041 F7F9                            idiv ecx ; eax = (7+x)/(b*b-c/d+2)
    54                                                   ; edx = (7+x)%(b*b-c/d+2)
    55                                                  
    56 00000043 89C3                            mov ebx,eax
    57                                          
    58 00000045 A0[00000000]                    mov al,[a]
    59 0000004A 6698                            cbw
    60 0000004C 98                              cwde ; ebx = a
    61                                          
    62 0000004D 29D8                            sub eax,ebx ; eax = a-(7+x)/(b*b-c/d+2)
    63                                      
    64                                          ; exit(0)
    65 0000004F 6A00                            push dword 0      ; push the parameter for exit onto the stack
    66 00000051 FF15[00000000]                  call [exit]       ; call exit to terminate the program
