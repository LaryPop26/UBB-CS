        -:    0:Source:C:/Users/popla/CLionProjects/MovieRentalAppL8/repository.cpp
        -:    0:Graph:C:\Users\popla\CLionProjects\MovieRentalAppL8\cmake-build-debug-coverage\CMakeFiles\MovieRentalApp.dir\repository.cpp.gcno
        -:    0:Data:C:\Users\popla\CLionProjects\MovieRentalAppL8\cmake-build-debug-coverage\CMakeFiles\MovieRentalApp.dir\repository.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by popla on 29-Mar-25.
        -:    3://
        -:    4:#include "repository.h"
        -:    5:#include <algorithm>  // pentru copy_if, find_if, any_of
        -:    6:#include <iterator>   // pentru back_inserter
        -:    7:#include <ostream>
        -:    8:
       31:    9:auto MovieRepository::isin(const Movie& movie_to_search_for) -> bool {
       31:   10:    return std::any_of(movies.begin(), movies.end(), [&](const Movie& movie) {
       35:   11:        return movie.getTitle() == movie_to_search_for.getTitle();
       31:   12:    });
        -:   13:}
        -:   14:
       27:   15:void MovieRepository::addMovie(const Movie& movieToAdd) {
       27:   16:    if (isin(movieToAdd)) {
        3:   17:        throw RepoException("Movie is already in the list");
        -:   18:    }
       26:   19:    movies.push_back(movieToAdd);
       26:   20:}
        -:   21:
        7:   22:void MovieRepository::deleteMovie(int position) {
        7:   23:    if (position < 0 || position >= static_cast<int>(movies.size())) {
        3:   24:        throw RepoException("Invalid position");
        -:   25:    }
        6:   26:    movies.erase(movies.begin() + position);
        6:   27:}
        -:   28:
        4:   29:void MovieRepository::updateMovie(const Movie& movieToUpdate) {
        4:   30:    if (!isin(movieToUpdate)) {
        3:   31:        throw RepoException("Movie isn't in the list");
        -:   32:    }
        9:   33:    for (auto& movie : movies) {
        6:   34:        if (movie.getTitle() == movieToUpdate.getTitle()) {
        3:   35:            movie.setGenre(movieToUpdate.getGenre());
        3:   36:            movie.setYear(movieToUpdate.getYear());
        3:   37:            movie.setMainChar(movieToUpdate.getMainChar());
        -:   38:        }
        -:   39:    }
        3:   40:}
        -:   41:
       54:   42:auto MovieRepository::getMovies() const -> const vector<Movie>& {
       54:   43:    return this->movies;
        -:   44:}
        -:   45:
        6:   46:auto MovieRepository::findPosition(const string& title) const -> int {
        6:   47:    auto iter = std::find_if(movies.begin(), movies.end(), [&](const Movie& movie) {
       11:   48:        return movie.getTitle() == title;
        -:   49:    });
        -:   50:
        6:   51:    if (iter == movies.end()) {
        3:   52:        throw RepoException("Movie position not found");
        -:   53:    }
        -:   54:
       15:   55:    return static_cast<int>(std::distance(movies.begin(), iter));
        -:   56:}
        -:   57:
        8:   58:auto MovieRepository::searchMovie(const string &title) -> const Movie & {
        -:   59:  auto iter =
        8:   60:      std::find_if(movies.begin(), movies.end(), [&](const Movie &movie) {
       13:   61:        return movie.getTitle() == title;
        -:   62:      });
        -:   63:
        8:   64:  if (iter == movies.end()) {
        3:   65:    throw RepoException("Movie not found");
        -:   66:  }
        -:   67:
       14:   68:  return *iter;
        -:   69:}
      11*:   70:MovieRepository::~MovieRepository() = default;
------------------
_ZN15MovieRepositoryD0Ev:
    #####:   70:MovieRepository::~MovieRepository() = default;
------------------
_ZN15MovieRepositoryD2Ev:
       11:   70:MovieRepository::~MovieRepository() = default;
------------------
        -:   71:
        4:   72:auto operator<<(ostream &out, const RepoException &repo_exception)
        -:   73:    -> ostream & {
       77:   74:  for (const auto &message : repo_exception.errorMessage) {
       73:   75:    out << message;
        -:   76:  }
        4:   77:  return out;
        -:   78:}
        -:   79:
        -:   80:
        5:   81:void RepoFile::read_from_file() {
        5:   82:    std::ifstream fin(file_name);
        5:   83:    if (!fin.is_open()) {
        3:   84:        throw RepoException("File not found");
        -:   85:    }
        -:   86:    while (true) {
        6:   87:        string title;
        6:   88:        std::getline(fin>>std::ws, title);
        6:   89:        if (fin.fail()) {break;}
        2:   90:        string genre;
        2:   91:        std::getline(fin>>std::ws, genre);
        2:   92:        int year=0;
        2:   93:        fin>>year;
        2:   94:        string mainChar;
        2:   95:        std::getline(fin>>std::ws, mainChar);
        -:   96:
        2:   97:        Movie movie{ title, genre, year, mainChar};
        2:   98:        MovieRepository::addMovie(movie);
        8:   99:    }
        4:  100:    fin.close();
        5:  101:}
        -:  102:
       15:  103:void RepoFile::write_to_file() {
       15:  104:    std::ofstream fout(file_name);
      15*:  105:    if (!fout.is_open()) {throw RepoException("File couldn't be found: " + file_name);}
       36:  106:    for (const auto &movie : MovieRepository::getMovies()) {
       21:  107:        fout<<movie.getTitle()<<"\n";
       21:  108:        fout<<movie.getGenre()<<"\n";
       21:  109:        fout<<movie.getYear()<<"\n";
       21:  110:        fout<<movie.getMainChar()<<"\n";
        -:  111:    }
       15:  112:    fout.close();
       15:  113:}
        -:  114:
        -:  115:
        -:  116:
        -:  117:
