        -:    0:Source:C:/Users/popla/CLionProjects/lab2-4/controller.c
        -:    0:Graph:C:\Users\popla\CLionProjects\lab2-4\cmake-build-debug-coverage\CMakeFiles\lab2_4.dir\controller.c.gcno
        -:    0:Data:C:\Users\popla\CLionProjects\lab2-4\cmake-build-debug-coverage\CMakeFiles\lab2_4.dir\controller.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by popla on 11-Mar-25.
        -:    3://
        -:    4:
        -:    5:#include "controller.h"
        -:    6:
        -:    7:#include <string.h>
        -:    8:
        -:    9:#include "MyList.h"
        -:   10:#include "validation.h"
        -:   11:
function addParticipantController called 13 returned 100% blocks executed 100%
       13:   12:int addParticipantController(MyList* participants, char* lastName, char* firstName, int score) {
       13:   13:    Participant p = createParticipant(lastName, firstName, score);
       13:   13-block  0
call    0 returned 13
       13:   14:    int valCode = validate_entity(p);
call    0 returned 13
       13:   15:    if (valCode == 0) return valCode;
branch  0 taken 3 (fallthrough)
branch  1 taken 10
        3:   15-block  0
       10:   16:    addElem(participants, p);
       10:   16-block  0
call    0 returned 10
       10:   17:    return 0;
        -:   18:}
        -:   19:
function updateParticipantController called 1 returned 100% blocks executed 88%
        1:   20:int updateParticipantController(MyList* participants, char* lastName, char* firstName, int score) {
        1:   21:    Participant participant = createParticipant(lastName, firstName, score);
        1:   21-block  0
call    0 returned 1
        1:   22:    int valCode = validate_entity(participant);
call    0 returned 1
       1*:   23:    if (valCode == 0) return valCode;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   23-block  0
        1:   24:    updateElem(participants, participant);
        1:   24-block  0
call    0 returned 1
        1:   25:    return 0;
        -:   26:}
        -:   27:
function deleteParticipantController called 1 returned 100% blocks executed 83%
        1:   28:int deleteParticipantController(MyList* participants, int poz) {
        1:   29:    int valCode = validate_int(poz);
        1:   29-block  0
call    0 returned 1
       1*:   30:    if (valCode == 0) return valCode;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   30-block  0
        1:   31:    deleteElem(participants, poz);
        1:   31-block  0
call    0 returned 1
        1:   32:    return 0;
        -:   33:}
        -:   34:
function filterScore called 1 returned 100% blocks executed 100%
        1:   35:MyList filterScore(MyList* participants, int score) {
        1:   36:    MyList filteredList = createEmpty();
        1:   36-block  0
call    0 returned 1
        6:   37:    for (int i = 0; i < size(participants); i++) {
        5:   37-block  0
        6:   37-block  1
call    0 returned 6
branch  1 taken 5
branch  2 taken 1 (fallthrough)
        5:   38:        Participant p = getMyElement(participants, i);
        5:   38-block  0
call    0 returned 5
        5:   39:        if (p.score<score) addElem(&filteredList, p);
branch  0 taken 2 (fallthrough)
branch  1 taken 3
        2:   39-block  0
call    2 returned 2
        -:   40:    }
        1:   41:    return filteredList;
        1:   41-block  0
        -:   42:}
        -:   43:
function filterFirstLetter called 1 returned 100% blocks executed 100%
        1:   44:MyList filterFirstLetter(MyList* participants, char* firstLetter) {
        1:   45:    MyList filteredList = createEmpty();
        1:   45-block  0
call    0 returned 1
        6:   46:    for (int i = 0; i < size(participants); i++) {
        5:   46-block  0
        6:   46-block  1
call    0 returned 6
branch  1 taken 5
branch  2 taken 1 (fallthrough)
        5:   47:        Participant p = getMyElement(participants, i);
        5:   47-block  0
call    0 returned 5
        5:   48:        if (strncmp(p.lastName,firstLetter,1) == 0) addElem(&filteredList, p);
branch  0 taken 2 (fallthrough)
branch  1 taken 3
        2:   48-block  0
call    2 returned 2
        -:   49:    }
        1:   50:    return filteredList;
        1:   50-block  0
        -:   51:}
